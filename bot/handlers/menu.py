from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
import requests
import os
import logging
from preload.config import TOKEN
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from preload.keyboard import *
from db.db_adapter.users_database import UsersAdapter
from preload.states import *
from preload.keyboard import *
from aiogram.types import FSInputFile


router = Router()
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
user_adapter = UsersAdapter()


@router.message(Command(commands=['stop']))
async def stop_func(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('<b>üîä–ú–µ–Ω—éüîä</b>', reply_markup=menu_kb)


@router.callback_query(F.data == "download_track")
async def download_track(callback: CallbackQuery, state: FSMContext):
    await state.set_state(uForm.download_track)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Å–Ω—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å\n"
                                  "–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ</b>\n"
                                  "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /stop")


@router.message(uForm.download_track, F.text)
async def download_track_api(message: Message, state: FSMContext):
    if message.text == "/stop":
        await state.clear()
        await message.answer('<b>üîä–ú–µ–Ω—éüîä</b>', reply_markup=menu_kb)
        return

    await state.clear()
    search_msg = await message.answer("–ò–¥—ë—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
    
    try:
        req = f"http://127.0.0.1:5000/api/v1/track/{message.text}"
        response = requests.get(req)
        
        if response.status_code != 200:
            await search_msg.delete()
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫.", reply_markup=kb_stop)
            return
            
        data = response.json()
        
        if data.get("response") != "OK":
            await search_msg.delete()
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫.", reply_markup=kb_stop)
            return
            
        filename = os.path.basename(data.get("filename", ""))
        if not filename:
            await search_msg.delete()
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Ç—Ä–µ–∫–∞.", reply_markup=kb_stop)
            return
            
        file_path = os.path.join('..', 'temp', filename)
        abs_file_path = os.path.abspath(file_path)
        
        if not os.path.exists(abs_file_path):
            await search_msg.delete()
            await message.answer("–§–∞–π–ª —Ç—Ä–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_stop)
            return
            
        try:
            audio_file = FSInputFile(abs_file_path)

            try:
                await search_msg.delete()
            except Exception:
                pass
                
            await message.answer_audio(
                audio=audio_file,
                reply_markup=kb_stop
            )

            # audio_file.close()
            os.remove(abs_file_path)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞.", reply_markup=kb_stop)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
        try:
            await search_msg.delete()
        except Exception:
            pass
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞.", reply_markup=kb_stop)


@router.callback_query(F.data == "find_album")
async def find_album(callback: CallbackQuery, state: FSMContext):
    await state.set_state(uForm.find_album)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–ª—å–±–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏\n"
                                  "–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ</b>\n"
                                  "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /stop")


@router.message(uForm.find_album, F.text)
async def find_album_api(message: Message, state: FSMContext):
    if message.text == "/stop":
        await state.clear()
        await message.answer('<b>üîä–ú–µ–Ω—éüîä</b>', reply_markup=menu_kb)
        return

    await state.clear()
    search_msg = await message.answer("–ò–¥—ë—Ç –ø–æ–∏—Å–∫ –∞–ª—å–±–æ–º–∞...")
    req = f"http://127.0.0.1:5000/api/v1/album/{message.text}"
    response = requests.get(req).json()
    
    if response.get("response") != "OK":
        await search_msg.delete()
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–ª—å–±–æ–º.", reply_markup=kb_stop)
        return
        
    album_info = response.get("album_info", {})
    tracks = album_info.get("tracks", [])

    album_text = f"üéµ <b>{album_info.get('title', '')}</b>\n"
    album_text += f"üë§ <b>{', '.join(album_info.get('artists', []))}</b>\n"
    album_text += f"üìÖ {album_info.get('year', '')}\n"
    album_text += f"üéº {album_info.get('genre', '')}\n\n"
    album_text += "üìã <b>–¢—Ä–µ–∫–∏:</b>\n"
    
    for i, track in enumerate(tracks, 1):
        artists = ', '.join(track.get('artists', []))
        album_text += f"{i}. <b>{track.get('title', '')}</b>\n"
        album_text += f"   üë§ {artists}\n"
        album_text += f"   ‚è± {track.get('duration', '')}\n"
        album_text += f"   üîó <a href='https://music.yandex.ru/track/{track.get('id')}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫</a>\n\n"
    
    await search_msg.delete()
    if album_info.get('cover'):
        await message.answer_photo(album_info.get('cover'))
    await message.answer(album_text, reply_markup=kb_stop, parse_mode="HTML")


@router.callback_query(F.data == "ai_tracks")
async def ai_tracks(callback: CallbackQuery, state: FSMContext):
    await state.set_state(uForm.ai_tracks)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è(–º–∏–Ω–∏–º—É–º 3) "
                                  "–∏ –ò–ò –ø–æ–¥–±–µ—Ä—ë—Ç –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                                  "–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ</b>\n"
                                  "              <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ</b>\n"
                                  "              <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ</b>\n"
                                  "                                       –∏ —Ç–¥...\n"
                                  "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /stop")


@router.message(uForm.ai_tracks, F.text)
async def ai_tracks_api(message: Message, state: FSMContext):
    if message.text == "/stop":
        await state.clear()
        await message.answer('<b>üîä–ú–µ–Ω—éüîä</b>', reply_markup=menu_kb)
        return

    await state.clear()
    search_msg = await message.answer("–ò–¥—ë—Ç –ø–æ–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    req = f"http://127.0.0.1:5000/api/v1/AI_tracks/{message.text}"
    response = requests.get(req).json()
    
    if response.get("response") != "OK":
        await search_msg.delete()
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.", reply_markup=kb_stop)
        return
        
    recommendations = response.get("recommendations", [])

    result = "üéµ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç—Ä–µ–∫–∏:</b>\n\n"
    
    for i, track in enumerate(recommendations, 1):
        result += f"{i}. <b>{track.get('title', '')}</b>\n"
        result += f"   üë§ {', '.join(track.get('artists', []))}\n"
        result += f"   ‚è± {track.get('duration', '')}\n"
        if track.get('cover'):
            result += f"   üñº <a href='{track.get('cover')}'>–û–±–ª–æ–∂–∫–∞</a>\n"
        result += f"   üîó <a href='{track.get('link')}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫</a>\n\n"
    
    await search_msg.delete()
    await message.answer(result, reply_markup=kb_stop, parse_mode="HTML")


@router.callback_query(F.data == "similar_tracks")
async def similar_tracks(callback: CallbackQuery, state: FSMContext):
    await state.set_state(uForm.similar_tracks)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–ª—å–±–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏\n"
                                  "–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ</b>\n"
                                  "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /stop")


@router.message(uForm.similar_tracks, F.text)
async def similar_tracks_api(message: Message, state: FSMContext):
    if message.text == "/stop":
        await state.clear()
        await message.answer('<b>üîä–ú–µ–Ω—éüîä</b>', reply_markup=menu_kb)
        return

    await state.clear()
    search_msg = await message.answer("–ò–¥—ë—Ç –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–µ–∫–æ–≤...")
    req = f"http://127.0.0.1:5000/api/v1/similar/{message.text}"
    response = requests.get(req).json()
    
    if response.get("response") != "OK":
        await search_msg.delete()
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏.", reply_markup=kb_stop)
        return
        
    original_track = response.get("original_track", {})
    similar_tracks = response.get("similar_tracks", [])

    result = "üéµ <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫:</b>\n"
    result += f"<b>{original_track.get('title', '')}</b>\n"
    result += f"üë§ {', '.join(original_track.get('artists', []))}\n"
    result += f"‚è± {original_track.get('duration', '')}\n"
    if original_track.get('cover'):
        result += f"üñº <a href='{original_track.get('cover')}'>–û–±–ª–æ–∂–∫–∞</a>\n"
    result += f"üîó <a href='{original_track.get('link')}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫</a>\n\n"

    result += "üéµ <b>–ü–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏:</b>\n\n"
    
    for i, track in enumerate(similar_tracks, 1):
        result += f"{i}. <b>{track.get('title', '')}</b>\n"
        result += f"   üë§ {', '.join(track.get('artists', []))}\n"
        result += f"   ‚è± {track.get('duration', '')}\n"
        if track.get('cover'):
            result += f"   üñº <a href='{track.get('cover')}'>–û–±–ª–æ–∂–∫–∞</a>\n"
        result += f"   üîó <a href='{track.get('link')}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫</a>\n\n"
    
    await search_msg.delete()
    await message.answer(result, reply_markup=kb_stop, parse_mode="HTML")
